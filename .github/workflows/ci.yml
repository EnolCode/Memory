name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: memory_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s
          --health-timeout 5s --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s
          --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: backend/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: ./backend
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        working-directory: ./backend
        run: pnpm run lint

      - name: Run tests with coverage
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/memory_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET_KEY: test-secret-key-for-ci
          JWT_REFRESH_SECRET_KEY: test-refresh-secret-key-for-ci
          JWT_ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          REFRESH_TOKEN_EXPIRE_DAYS: 7
          CORS_ORIGINS: http://localhost:3000
          ENVIRONMENT: test
        run: |
          pnpm run test:cov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Run linter
        working-directory: ./frontend
        run: pnpm run lint

      - name: Run type check
        working-directory: ./frontend
        run:
          pnpm run type-check || pnpm run typecheck || pnpm exec tsc --noEmit

      - name: Run tests
        working-directory: ./frontend
        run: pnpm test -- --watchAll=false --coverage

      - name: Build
        working-directory: ./frontend
        run: pnpm run build

  sonarcloud:
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install backend dependencies
        working-directory: ./backend
        run: pnpm install --frozen-lockfile

      - name: Generate backend coverage
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/memory_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET_KEY: test-secret-key
          JWT_REFRESH_SECRET_KEY: test-refresh-secret-key
        run: |
          pnpm run test:cov || true

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Generate frontend coverage
        working-directory: ./frontend
        run: pnpm test -- --watchAll=false --coverage || true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
